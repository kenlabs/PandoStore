// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package types

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

var lengthBufMetaState = []byte{132}

func (t *MetaState) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufMetaState); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.ProviderID (string) (string)
	if len(t.ProviderID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.ProviderID was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.ProviderID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.ProviderID)); err != nil {
		return err
	}

	// t.SnapShotCid (string) (string)
	if len(t.SnapShotCid) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.SnapShotCid was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.SnapShotCid))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.SnapShotCid)); err != nil {
		return err
	}

	// t.SnapShotHeight (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.SnapShotHeight)); err != nil {
		return err
	}

	// t.Context ([]uint8) (slice)
	if len(t.Context) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Context was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Context))); err != nil {
		return err
	}

	if _, err := w.Write(t.Context[:]); err != nil {
		return err
	}
	return nil
}

func (t *MetaState) UnmarshalCBOR(r io.Reader) error {
	*t = MetaState{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 4 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.ProviderID (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.ProviderID = string(sval)
	}
	// t.SnapShotCid (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.SnapShotCid = string(sval)
	}
	// t.SnapShotHeight (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.SnapShotHeight = uint64(extra)

	}
	// t.Context ([]uint8) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.Context: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Context = make([]uint8, extra)
	}

	if _, err := io.ReadFull(br, t.Context[:]); err != nil {
		return err
	}
	return nil
}
